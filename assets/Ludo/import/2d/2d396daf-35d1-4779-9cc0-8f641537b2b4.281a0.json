[1,0,0,[["cc.TextAsset",["_name","text"],1]],[[0,0,1,3]],[[0,"rx-min.d","declare namespace rx {\r\n    interface IRegInfo {\r\n        uiNode?: any;\r\n        eventName?: string;\r\n        regType: string;\r\n        callback: any;\r\n    }\r\n    class TAutoRegEventCom {\r\n        protected _eventRegExpList: Array<RegExp>;\r\n        private _UIRegisterInfoList;\r\n        protected _checkObject: any;\r\n        protected _eventMgr: cc.EventTarget;\r\n        constructor(checkOb: any, eventMgr: cc.EventTarget);\r\n        addEventRegExp(re: RegExp): void;\r\n        protected forObject(keyList: any): void;\r\n        autoRegisteredEvent(): void;\r\n        protected getRegInfo(key: string, re: RegExp): IRegInfo;\r\n        protected registeredEvent(regInfo: IRegInfo): void;\r\n        clearReg(): void;\r\n    }\r\n}\r\ndeclare namespace rx {\r\n    interface IScene {\r\n        enterStage(stageKey: number): void;\r\n        exitStage(lastStageKey: number, stageKey: number): void;\r\n    }\r\n    interface ILayer {\r\n        enterStage(key: number): void;\r\n        exitStage(lastKey: number, key: number): void;\r\n    }\r\n    interface IEventRegCom {\r\n        autoRegisteredEvent(): void;\r\n    }\r\n    interface IAutoRegNode {\r\n        _eventRegCom: IEventRegCom;\r\n    }\r\n    interface IWindow {\r\n        path: string;\r\n        winData: any;\r\n        close(): void;\r\n        show(): void;\r\n        onClose: (data: any) => void;\r\n    }\r\n    interface ISubNode {\r\n        readonly _path: string;\r\n        readonly _data: any;\r\n        closeWin(): void;\r\n    }\r\n}\r\ndeclare namespace rx {\r\n    class TAssetsMgr {\r\n        constructor();\r\n        loadResAsync<T extends cc.Asset>(url: string, bundleName: string, Assettype: typeof cc.Asset): Promise<T>;\r\n        loadBundleAsync(bundleName: string): Promise<cc.AssetManager.Bundle>;\r\n        cleanBunldeRes(bundleName: string): void;\r\n    }\r\n}\r\ndeclare namespace rx {\r\n    class TAudioMgr {\r\n        _clipList: {\r\n            [key: string]: cc.AudioClip;\r\n        };\r\n        private _isPlayMusic;\r\n        private _isPlaySound;\r\n        constructor();\r\n        init(): Promise<void>;\r\n        isPlayMusic(): boolean;\r\n        isPlaySound(): boolean;\r\n        playEffect(key: string): void;\r\n        playMusic(): void;\r\n    }\r\n}\r\ndeclare namespace rx {\r\n    class TWinMgr {\r\n        protected _winList: Array<IWindow>;\r\n        protected _winLayer: cc.Node;\r\n        private _assetsMgr;\r\n        constructor(winLayer: cc.Node, assteMgr: TAssetsMgr);\r\n        showWin(winPath: string, bundleName: string, winData?: any, onClose?: (data: any) => void): Promise<IWindow>;\r\n        popWin(): void;\r\n        closeAllWin(): void;\r\n        closeWindow(winPath: string): void;\r\n        getCurWindow(): IWindow;\r\n        getWindowByName(winPath: string): IWindow;\r\n    }\r\n}\r\n"]],0,0,[],[],[]]