[1,["3cD1vRzWxMmo2wQnkoJZWw@f9941","17hrU4IQJCd5ZCEI0Snqw7@6c48a","3cD1vRzWxMmo2wQnkoJZWw@6c48a","87vYrrKldC8pv3byRP1TNw","17hrU4IQJCd5ZCEI0Snqw7@f9941","6aBcw2kB1Amrz+oTLbGZTL@f9941","6aBcw2kB1Amrz+oTLbGZTL@6c48a","bbEdU8zsZLmYQtt7b4PKig"],["node","_textureSource","_spriteFrame","_cameraComponent","scene","_parent","_customMaterial","spf_err","spf_correct","_effectAsset"],[["cc.Node",["_name","_layer","_active","_parent","_components","_children","_lpos"],0,1,12,2,5],"cc.SpriteFrame",["cc.Node",["_name","_layer","_id","_components","_children","_parent","_lpos"],0,9,2,1,5],["cc.Sprite",["_sizeMode","_type","node","_color"],1,1,5],["cc.Widget",["_alignFlags","_top","_bottom","_originalWidth","_originalHeight","node"],-2,1],["cc.Label",["_string","_actualFontSize","_fontSize","_horizontalAlign","_overflow","node"],-2,1],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_layer","_parent","_components","_lpos"],1,1,2,5],["cc.UITransform",["node","_contentSize"],3,1,5],["cc.Canvas",["node","_cameraComponent"],3,1,1],["53414QIAe5IVoB/sfg+vr1H",["node","layerList"],3,1,2],["cc.Layout",["node"],3,1],["cc.Scene",["_name","_children","_globals"],2,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","lightProbeInfo"],3,4,4,4,4,4,4],["cc.AmbientInfo",["_skyColorHDR","_groundAlbedoHDR"],3,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.LightProbeInfo",[],3],["cc.Camera",["_projection","_orthoHeight","_near","_visibility","node","_color"],-1,1,5],["ada1fCgvG5KxaY6OVDuJnqN",["layerType","node"],2,1],["51b9aVmIO9LDaOXRV6wytWm",["node","lbl_hint","sp_icon"],3,1,1,1],["cc.BlockInputEvents",["node"],3,1],["f991fqLnWtDIotl3Oaq69gU",["layerType","node","toast","waitAnima","blockInputEvents"],2,1,1,1,1],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[8,0,1,1],[4,0,3,4,5,4],[0,0,1,3,4,3],[21,0,1,2],[0,0,1,3,5,4,3],[0,0,1,3,4,6,3],[6,0,2],[2,0,1,2,4,3,6,4],[2,0,1,5,4,3,3],[2,0,1,5,3,3],[0,0,2,1,3,5,4,6,4],[7,0,1,2,3,4,3],[9,0,1,1],[4,0,1,2,5,4],[10,0,1,1],[11,0,1],[3,1,0,2,3],[3,0,2,3,2],[3,0,2,2],[5,0,1,2,5,4],[5,0,3,1,2,4,5,6],[12,0,1,2,2],[13,0,1,2,3,4,5,1],[14,0,1,1],[15,0,1,1],[16,1],[17,1],[18,1],[19,1],[20,0,1,2,3,4,5,5],[22,0,1,2,1],[23,0,1],[24,0,1,2,3,4,2],[25,0,1,2,3,5],[26,0,1,2,4]],[[[{"name":"sp_loading","rect":{"x":0,"y":0,"width":10,"height":10},"offset":{"x":0,"y":0},"originalSize":{"width":10,"height":10},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-5,-5,0,5,-5,0,-5,5,0,5,5,0],"indexes":[0,1,2,2,1,3],"uv":[0,10,10,10,0,0,10,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-5,"y":-5,"z":0},"maxPos":{"x":5,"y":5,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[1],[1]],[[{"name":"correct","rect":{"x":0,"y":0,"width":113,"height":110},"offset":{"x":0,"y":0},"originalSize":{"width":113,"height":110},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-56.5,-55,0,56.5,-55,0,-56.5,55,0,56.5,55,0],"indexes":[0,1,2,2,1,3],"uv":[0,110,113,110,0,0,113,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-56.5,"y":-55,"z":0},"maxPos":{"x":56.5,"y":55,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[1],[2]],[[[6,"mainScene"],[7,"Canvas",33554432,"beI88Z2HpFELqR4T5EMHpg",[-10,-11],[[0,-1,[5,1334,750]],[12,-3,-2],[13,45,-5.684341886080802e-14,-5.684341886080802e-14,-4],[14,-9,[-5,-6,-7,-8]]],[1,667,374.99999999999994,0]],[8,"layerList",33554432,1,[-14,-15,-16,-17],[[0,-12,[5,1334,750]],[1,45,100,100,-13]]],[4,"topLayer",33554432,2,[-22,-23],[[[0,-18,[5,1334,750]],[1,45,100,100,-19],-20,-21],4,4,1,1]],[10,"lyt_toast",false,33554432,3,[-28,-29],[[[0,-24,[5,500,100]],[15,-25],[16,1,0,-26],-27],4,4,4,1],[1,0,5.37,0]],[2,"gameLayer",33554432,2,[[[0,-30,[5,1334,750]],[1,45,100,100,-31],-32],4,4,1]],[2,"mainUILayer",33554432,2,[[[0,-33,[5,1334,750]],[1,45,100,100,-34],-35],4,4,1]],[2,"winLayer",33554432,2,[[[0,-36,[5,1334,750]],[1,45,100,100,-37],-38],4,4,1]],[4,"sp_loading",33554432,3,[-41],[[[0,-39,[5,600,600]],-40],4,1]],[9,"Label",33554432,8,[[0,-42,[5,92.54,50.4]],[19,"Loading",26,26,-43]]],[5,"sp_icon",33554432,4,[[[0,-44,[5,55,55]],-45],4,1],[1,-187.701,0,0]],[5,"lbl_hint",33554432,4,[[[0,-46,[5,350,80]],-47],4,1],[1,39.516,0,0]],[21,"mainScene",[1],[22,[23,[2,0,0,0,0.520833125],[2,0,0,0,0]],[24,[4,4283190348],[0,512,512]],[25],[26],[27],[28]]],[11,"Camera",33554432,1,[-48],[1,0,0,1000]],[29,0,429.86941870261165,0,1108344832,13,[4,4278190080]],[3,1,5],[3,2,6],[3,3,7],[17,0,8,[4,4283979965]],[18,0,10],[20,"1111111111111",0,31,30,2,11],[30,4,20,19],[31,3],[32,4,3,21,18,22]],0,[0,0,1,0,3,14,0,0,1,0,0,1,0,-1,15,0,-2,16,0,-3,17,0,-4,23,0,0,1,0,-1,13,0,-2,2,0,0,2,0,0,2,0,-1,5,0,-2,6,0,-3,7,0,-4,3,0,0,3,0,0,3,0,-3,22,0,-4,23,0,-1,8,0,-2,4,0,0,4,0,0,4,0,0,4,0,-4,21,0,-1,10,0,-2,11,0,0,5,0,0,5,0,-3,15,0,0,6,0,0,6,0,-3,16,0,0,7,0,0,7,0,-3,17,0,0,8,0,-2,18,0,-1,9,0,0,9,0,0,9,0,0,10,0,-2,19,0,0,11,0,-2,20,0,-1,14,0,4,12,1,5,12,48],[18,18,19,21,21],[6,2,2,7,8],[3,4,0,5,0]],[[{"name":"error","rect":{"x":0,"y":0,"width":113,"height":113},"offset":{"x":0,"y":0},"originalSize":{"width":113,"height":113},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-56.5,-56.5,0,56.5,-56.5,0,-56.5,56.5,0,56.5,56.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,113,113,113,0,0,113,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-56.5,"y":-56.5,"z":0},"maxPos":{"x":56.5,"y":56.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[1],0,[0],[1],[6]],[[[33,"mat_loading",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[9],[7]],[[[34,"../mainScene/rxlib/topLayer/res/eff_loading",[{"hash":34121192,"name":"../mainScene/rxlib/topLayer/res/eff_loading|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_POINT 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_SPHERE 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nfloat circle(in vec2 uv, in float radius){\n    return 1.0 - smoothstep(radius-0.01*radius, radius+0.01*radius, length(uv));\n}\nconst float PI = 3.14159;\nvec4 frag () {\n  vec4 o = vec4(0.3,0.1,0.5,0.0);\n  vec2 uv = uv0 - 0.5;\n  float R = 0.1;\n  float radius = 0.01;\n  vec2 pos = vec2(0.0);\n  float rotation = 0.0;\n  const float count = 8.0;\n  float time = cc_time.x;\n  float speed = 4.0;\n  for(float i = 0.0; i<count; i++){\n      rotation = 2.0*PI*i/count + time*speed*PI/5.0;\n      pos = vec2(R*cos(rotation), R*sin(rotation));\n      o.a += circle(uv-pos, radius * (sin(rotation*0.45)+1.0)/3.0 + radius/3.0);\n      o.r += o.a * (sin(i/count + time + PI*6.0/3.0) + 1.0)/2.0;\n      o.g += o.a * (sin(i/count + time + PI*4.0/3.0) + 1.0)/2.0;\n      o.b += o.a * (sin(i/count + time + PI*2.0/3.0) + 1.0)/2.0;\n  }\n  ALPHA_TEST(o);\n  return color * o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_POINT 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_SPHERE 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform highp vec4 cc_time;\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nfloat circle(in vec2 uv, in float radius){\n    return 1.0 - smoothstep(radius-0.01*radius, radius+0.01*radius, length(uv));\n}\nconst float PI = 3.14159;\nvec4 frag () {\n  vec4 o = vec4(0.3,0.1,0.5,0.0);\n  vec2 uv = uv0 - 0.5;\n  float R = 0.1;\n  float radius = 0.01;\n  vec2 pos = vec2(0.0);\n  float rotation = 0.0;\n  const float count = 8.0;\n  float time = cc_time.x;\n  float speed = 4.0;\n  for(float i = 0.0; i<count; i++){\n      rotation = 2.0*PI*i/count + time*speed*PI/5.0;\n      pos = vec2(R*cos(rotation), R*sin(rotation));\n      o.a += circle(uv-pos, radius * (sin(rotation*0.45)+1.0)/3.0 + radius/3.0);\n      o.r += o.a * (sin(i/count + time + PI*6.0/3.0) + 1.0)/2.0;\n      o.g += o.a * (sin(i/count + time + PI*4.0/3.0) + 1.0)/2.0;\n      o.b += o.a * (sin(i/count + time + PI*2.0/3.0) + 1.0)/2.0;\n  }\n  ALPHA_TEST(o);\n  return color * o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":54,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":43}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../mainScene/rxlib/topLayer/res/eff_loading|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]
